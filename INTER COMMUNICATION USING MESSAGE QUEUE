#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>

#define MAX_MSG_SIZE 1024

struct message {
    long mtype;
    char mtext[MAX_MSG_SIZE];
};

int main()
{
    key_t key;
    int msgid;
    struct message msgbuf;

    // Generate a unique key for the message queue
    key = ftok(".", 'a');

    // Create the message queue with read and write permissions
    msgid = msgget(key, IPC_CREAT | 0666);
    if (msgid == -1) {
        perror("msgget");
        exit(1);
    }

    // Send a message to the queue
    msgbuf.mtype = 1;
    strcpy(msgbuf.mtext, "Hello from process A!");
    if (msgsnd(msgid, &msgbuf, strlen(msgbuf.mtext) + 1, 0) == -1) {
        perror("msgsnd");
        exit(1);
    }

    // Receive a message from the queue
    if (msgrcv(msgid, &msgbuf, MAX_MSG_SIZE, 2, 0) == -1) {
        perror("msgrcv");
        exit(1);
    }
    printf("Received message from process B: %s\n", msgbuf.mtext);

    // Clean up the message queue
    if (msgctl(msgid, IPC_RMID, NULL) == -1) {
        perror("msgctl");
        exit(1);
    }

    return 0;
}
