#include<stdio.h>

// Structure to hold process information
struct process {
    int pid; // Process ID
    int arrival_time; // Arrival Time
    int burst_time; // Burst Time
    int waiting_time; // Waiting Time
    int turnaround_time; // Turnaround Time
};

// Function to sort the processes based on burst time
void sort_processes(struct process *p, int n) {
    int i, j;
    struct process temp;
    for(i=0; i<n-1; i++) {
        for(j=0; j<n-i-1; j++) {
            if(p[j].burst_time > p[j+1].burst_time) {
                temp = p[j];
                p[j] = p[j+1];
                p[j+1] = temp;
            }
        }
    }
}

// Function to calculate waiting and turnaround times
void calculate_times(struct process *p, int n) {
    int i, total_waiting_time=0, total_turnaround_time=0;
    p[0].waiting_time = 0;
    p[0].turnaround_time = p[0].burst_time;
    for(i=1; i<n; i++) {
        p[i].waiting_time = p[i-1].waiting_time + p[i-1].burst_time;
        p[i].turnaround_time = p[i].waiting_time + p[i].burst_time;
        total_waiting_time += p[i].waiting_time;
        total_turnaround_time += p[i].turnaround_time;
    }
    printf("\nAverage Waiting Time: %.2f", (float)total_waiting_time/n);
    printf("\nAverage Turnaround Time: %.2f", (float)total_turnaround_time/n);
}

// Function to display the process details
void display_processes(struct process *p, int n) {
    int i;
    printf("\nProcess\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time");
    for(i=0; i<n; i++) {
        printf("\n%d\t%d\t\t%d\t\t%d\t\t%d", p[i].pid, p[i].arrival_time, p[i].burst_time, p[i].waiting_time, p[i].turnaround_time);
    }
}

int main() {
    int n, i;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    struct process p[n];
    for(i=0; i<n; i++) {
        p[i].pid = i+1;
        printf("Enter arrival time and burst time for process %d: ", i+1);
        scanf("%d %d", &p[i].arrival_time, &p[i].burst_time);
    }
    sort_processes(p, n);
    calculate_times(p, n);
    display_processes(p, n);
    return 0;
}
